{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-90905f27-545c-4ef6-b25d-00e6e6082826.json","kernel":"julia-1.8","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"file_extension":".jl","mimetype":"application/julia","name":"julia","version":"1.8.4"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1679540455523,"exec_count":102,"id":"adb9ba","input":"function greatest_center(data, K)\n    result = kmeans(data, K)\n\n    return maximum(result.centers)\nend","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"greatest_center (generic function with 1 method)"},"exec_count":102}},"pos":24,"start":1679540455521,"state":"done","type":"cell"}
{"cell_type":"code","end":1679548576824,"exec_count":124,"id":"54b90b","input":"using Pkg\n\n# Pkg.add(\"Clustering\")\n\nusing DataFrames\nusing Clustering\nusing Statistics\nusing Random","kernel":"julia-1.8","pos":0,"start":1679548576819,"state":"done","type":"cell"}
{"cell_type":"code","end":1679548581456,"exec_count":125,"id":"ecc8e1","input":"example = [1 2 5 7 8 11 13 14]\n\nK = 3;","kernel":"julia-1.8","pos":1,"start":1679548581450,"state":"done","type":"cell"}
{"cell_type":"code","end":1679548586446,"exec_count":126,"id":"5f2f67","input":"# First, we want to randomly choose K center points\n\nfunction center_points(data, K)\n    if length(data) < K\n        K = length(data)\n    end\n\n    while true\n        output = data[rand(1:length(data), K)]\n        if length(unique(output)) == K\n            return sort(output)\n        end\n    end\nend","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"center_points (generic function with 1 method)"},"exec_count":126}},"pos":3,"start":1679548586364,"state":"done","type":"cell"}
{"cell_type":"code","end":1679548589131,"exec_count":127,"id":"8394e9","input":"# We define the function distance to measure the distance between the datapoint and each center points\n\nfunction distance(x, centers)\n    output = zeros(length(centers))\n    for i = 1:length(output)\n        output[i] = abs(x - centers[i])\n    end\n    return output\nend","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"distance (generic function with 1 method)"},"exec_count":127}},"pos":5,"start":1679548589048,"state":"done","type":"cell"}
{"cell_type":"code","end":1679548591130,"exec_count":128,"id":"cb5d66","input":"# Then, we'll cluster each datapoint according to their distance to the center points\n\nfunction clustering(data, centers)\n    K = length(centers)\n    output = []\n\n    # Initialize clusters\n    for i = 1:K\n        push!(output, [])\n    end\n\n    # cluster each datapoint based on miminum distance\n    for i = 1:length(data)\n        xi_dist = distance(data[i], centers)\n        idx = findfirst(xi_dist .== minimum(xi_dist))\n        push!(output[idx], data[i])\n        sort!(output[idx])\n    end\n\n    return output\nend","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"clustering (generic function with 1 method)"},"exec_count":128}},"pos":6,"start":1679548591013,"state":"done","type":"cell"}
{"cell_type":"code","end":1679548594029,"exec_count":129,"id":"5ec861","input":"# Next, we'll calculate the mean of each clusters, which will become our new center points\n\nfunction clustermeans(clusters)\n    K = size(clusters, 1)\n    output = zeros(K)\n    for i = 1:K\n        output[i] = mean(clusters[i])\n    end\n    return output\nend","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"clustermeans (generic function with 1 method)"},"exec_count":129}},"pos":8,"start":1679548593949,"state":"done","type":"cell"}
{"cell_type":"code","end":1679548597858,"exec_count":130,"id":"92437a","input":"# We will repeat the process of clustering using the mean values until we reach stability\n\nprev = clusters\ncenters = meanvals\noutput = clusters\n\nwhile true\n    output = clustering(example, centers)\n    if all(output .== prev)\n        return output\n    else\n        prev = output\n        centers = clustermeans(output)\n    end\nend\n\noutput","kernel":"julia-1.8","output":{"0":{"ename":"LoadError","evalue":"UndefVarError: clusters not defined","traceback":["UndefVarError: clusters not defined","","Stacktrace:"," [1] top-level scope","   @ In[130]:3"]}},"pos":10,"start":1679548597846,"state":"done","type":"cell"}
{"cell_type":"code","end":1679548608538,"exec_count":131,"id":"da8b04","input":"# Let's put them all together into one function:\n\nfunction kmeanscluster(data, K)\n    # Randomly select center points c_1, ..., c_K\n    centers = center_points(data, K)\n\n\n    # For each datapoint, find the minimum distance and cluster\n    init_clusters = clustering(data, centers)\n\n\n    # Calculate the mean of each clusters\n    mean_vals = clustermeans(init_clusters)\n\n\n    # Repeat clustering process until stability is reached\n    prev = init_clusters\n    centers = mean_vals\n\n    while true\n        output = clustering(data, centers)\n        if all(output .== prev)\n            return output\n        else\n            prev = output\n            centers = clustermeans(output)\n        end\n    end\nend\n\n# NOTE: This function is written for only the 1-dimensional case","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"kmeanscluster (generic function with 1 method)"},"exec_count":131}},"pos":11,"start":1679548608456,"state":"done","type":"cell"}
{"cell_type":"code","end":1679548617089,"exec_count":133,"id":"f4ef34","input":"kmeanscluster(example, 3)","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"3-element Vector{Any}:\n Any[1, 2, 5]\n Any[7, 8]\n Any[11, 13, 14]"},"exec_count":133}},"pos":12,"start":1679548617085,"state":"done","type":"cell"}
{"cell_type":"code","end":1679548620378,"exec_count":134,"id":"119ab5","input":"kmeanscluster(example, 4)","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"4-element Vector{Any}:\n Any[1, 2]\n Any[5]\n Any[7, 8, 11]\n Any[13, 14]"},"exec_count":134}},"pos":13,"start":1679548620365,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"16ceb0","input":"","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d1e4f0","input":"","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"6fea6f","input":"result = kmeans(example, K)\n\n@show a = assignments(result);   # get the assignment of points to clusters\n@show c = counts(result);        # get the cluster sizes\n@show centers = result.centers;  # get the cluster centers","kernel":"julia-1.8","output":{"0":{"name":"stdout","text":"a = assignments(result) = [1, 1, 1, 3, 3, 2, 2, 2]\nc = counts(result) = [3, 3, 2]\n"},"1":{"name":"stdout","text":"centers = result.centers = [2.6666666666666665 12.666666666666666 7.5]\n"}},"pos":2,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"55b156","input":"centers = center_points(example, K)","output":{"0":{"data":{"text/plain":"3-element Vector{Int64}:\n  2\n  8\n 11"},"exec_count":17,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"d45660","input":"clusters = clustering(example, centers)","output":{"0":{"data":{"text/plain":"3-element Vector{Any}:\n Any[1, 2, 5]\n Any[7, 8]\n Any[11, 13, 14]"},"exec_count":18,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"521513","input":"meanvals = clustermeans(clusters)","output":{"0":{"data":{"text/plain":"3-element Vector{Float64}:\n  2.6666666666666665\n  7.5\n 12.666666666666666"},"exec_count":20,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"markdown","id":"3c6783","input":"","pos":26.5,"type":"cell"}
{"cell_type":"markdown","id":"70353f","input":"---","pos":23.5,"type":"cell"}
{"cell_type":"markdown","id":"9090d8","input":"---","pos":25,"type":"cell"}
{"end":1679539140713,"exec_count":30,"id":"9c58b1","input":"function score(data, K)\n    result = kmeans(data, K)\n\n    a = assignments(result)\n    centers = result.centers;\n\n    var_values = zeros(K);  # this will store our variance values\n    for i = 1:K\n        temp = data[a .== i]\n        var_values[i] = var(temp)\n    end\n\n    return sum(var_values)\nend","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"score (generic function with 1 method)"},"exec_count":30}},"pos":2.375,"start":1679539140702,"state":"done","type":"cell"}
{"end":1679539413836,"exec_count":60,"id":"9ffba7","input":"@show score(example, 1);\n@show score(example, 2);\n@show score(example, 3);\n@show score(example, 4);\n@show score(example, 5);\n","kernel":"julia-1.8","output":{"0":{"name":"stdout","text":"score(example, 1) = 23.410714285714285\nscore(example, 2) = 13.633333333333335\nscore(example, 3) = 7.166666666666668\nscore(example, 4) = NaN\nscore(example, 5) = NaN\n"}},"pos":2.5625,"start":1679539413832,"state":"done","type":"cell"}
{"end":1679539723673,"exec_count":91,"id":"c17d0c","input":"# Let's do another example dataset\n\nexample2 = [100 198 207 208 299 301 352 373 404 506 518 503]\n\n\n@show score(example2, 1);\n@show score(example2, 2);\n@show score(example2, 3);\n@show score(example2, 4);\n@show score(example2, 5);","kernel":"julia-1.8","output":{"0":{"name":"stdout","text":"score(example2, 1) = 18744.56818181818\nscore(example2, 2) = 11177.233333333334\nscore(example2, 3) = 4895.283333333333\nscore(example2, 4) = NaN\nscore(example2, 5) = NaN\n"}},"pos":2.65625,"start":1679539723670,"state":"done","type":"cell"}
{"end":1679540460464,"exec_count":104,"id":"da2eac","input":"greatest_center(example, 3)","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"12.666666666666666"},"exec_count":104}},"pos":23.875,"start":1679540460460,"state":"done","type":"cell"}
{"end":1679541616967,"exec_count":113,"id":"aa4d61","input":"# make a random dataset with 1000 random 5-dimensional points\nX = rand(2, 10)\n\n# cluster X into 20 clusters using K-means\nR = kmeans(X, 3; maxiter=200)\n\na = assignments(R) # get the assignments of points to clusters\nc = counts(R) # get the cluster sizes\nM = R.centers # get the cluster centers\n","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"2×3 Matrix{Float64}:\n 0.453173  0.886054  0.189641\n 0.776074  0.476393  0.0908958"},"exec_count":113}},"pos":26,"start":1679541616961,"state":"done","type":"cell"}
{"end":1679549892420,"exec_count":195,"id":"6fd0c6","input":"v = [[1, 2], [3, 4], [5, 6]]\nmean(v)","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"2-element Vector{Float64}:\n 3.0\n 4.0"},"exec_count":195}},"pos":29,"start":1679549892418,"state":"done","type":"cell"}
{"end":1679549999742,"exec_count":205,"id":"20759a","input":"center[1][1]","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"2"},"exec_count":205}},"pos":28.125,"start":1679549999739,"state":"done","type":"cell"}
{"end":1679550730494,"exec_count":227,"id":"8ae1d3","input":"function centerpoints(data, K)\n    return shuffle(data)[1:K]\nend\n\nfunction Euclidean_distance(point, centers)\n    output = zeros(length(centers))\n    for i = 1:length(output)\n        output[i] = sqrt((point[1]-centers[i][1])^2 + (point[2]-centers[i][2])^2)\n    end\n    return output\nend\n\n\nfunction cluster(data, centers)\n    K = length(centers)\n    output = []\n\n    for i = 1:K\n        push!(output, [])\n    end\n\n    for i = 1:length(data)\n        dist = Euclidean_distance(data[i], centers)\n        idx = findfirst(dist .== minimum(dist))\n        push!(output[idx], data[i])\n        sort!(output[idx])\n    end\n\n    return output\nend\n\n\nfunction clustermeans(clusters)\n    K = length(clusters)\n    output = []\n    for i = 1:K\n        push!(output, mean(clusters[i]))\n    end\n    return output\nend\n\n\nfunction kmeans2D(data, K)\n    centers = centerpoints(data, K)\n\n    init_clusters = cluster(data, centers)\n\n    mean_vals = clustermeans(init_clusters)\n\n    prev = init_clusters\n    centers = mean_vals\n\n    while true\n        output = cluster(data, centers)\n        if all(output .== prev)\n            return output\n        else\n            prev = output\n            centers = clustermeans(output)\n        end\n    end\nend","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"kmeans2D (generic function with 1 method)"},"exec_count":227}},"pos":28,"start":1679550730485,"state":"done","type":"cell"}
{"end":1679550756842,"exec_count":231,"id":"e5ccfb","input":"v = [[1, 2], [2, 3], [3, 4], [5, 6]]\ncp = centerpoints(v, 2);\nEuclidean_distance(v[1], cp);\ninit_cluster = cluster(v, cp);\nclustermeans(init_cluster);\nkmeans2D(v, 2)","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"2-element Vector{Any}:\n Any[[5, 6]]\n Any[[1, 2], [2, 3], [3, 4]]"},"exec_count":231}},"pos":27,"start":1679550756838,"state":"done","type":"cell"}
{"end":1679550862716,"exec_count":234,"id":"6d470d","input":"v = [[1, 2], [5, 6], [8, 9], [10, 4], [4, 5], [9, 10]]\n\nkmeans2D(v, 3)","kernel":"julia-1.8","output":{"0":{"data":{"text/plain":"3-element Vector{Any}:\n Any[[4, 5], [5, 6], [10, 4]]\n Any[[8, 9], [9, 10]]\n Any[[1, 2]]"},"exec_count":234}},"pos":28.25,"start":1679550862705,"state":"done","type":"cell"}
{"id":"2d9d9c","input":"","pos":11.5,"type":"cell"}
{"id":"7343d3","input":"","pos":30,"type":"cell"}
{"id":"8ae829","input":"","pos":2.75,"type":"cell"}
{"id":0,"time":1679541843939,"type":"user"}
{"last_load":1679534788370,"type":"file"}